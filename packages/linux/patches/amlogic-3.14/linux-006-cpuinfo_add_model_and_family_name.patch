diff --git a/arch/arm64/kernel/setup.c b/arch/arm64/kernel/setup.c
index 5168d1d..6524f40 100644
--- a/arch/arm64/kernel/setup.c
+++ b/arch/arm64/kernel/setup.c
@@ -440,6 +440,27 @@ static int c_show(struct seq_file *m, void *v)
 	int i;
 #ifdef CONFIG_AMLOGIC_CPU_INFO
 	unsigned int low0, low1, high0, high1;
+	unsigned int meson_major, meson_minor, meson_pack;
+	const char *meson_name, *meson_family;
+	static const struct meson_package_id {
+		const char *name;
+		const char *family;
+		unsigned int major_id;
+		unsigned int pack_id;
+		unsigned int pack_mask;
+	} meson_packages[] = {
+		{ "S905",   "GXBB", MESON_CPU_MAJOR_ID_GXBB, 0x0,  0x20 },
+		{ "S905H",  "GXBB", MESON_CPU_MAJOR_ID_GXBB, 0x3,  0xf },
+		{ "S905M",  "GXBB", MESON_CPU_MAJOR_ID_GXBB, 0x20, 0xf0 },
+		{ "S905D",  "GXL",  MESON_CPU_MAJOR_ID_GXL,  0x0,  0xf0 },
+		{ "S905X",  "GXL",  MESON_CPU_MAJOR_ID_GXL,  0x80, 0xf0 },
+		{ "S905W",  "GXL",  MESON_CPU_MAJOR_ID_GXL,  0xa0, 0xf0 },
+		{ "S905L",  "GXL",  MESON_CPU_MAJOR_ID_GXL,  0xc0, 0xf0 },
+		{ "S905M2", "GXL",  MESON_CPU_MAJOR_ID_GXL,  0xe0, 0xf0 },
+		{ "S805X",  "GXL",  MESON_CPU_MAJOR_ID_GXL,  0x30, 0xf0 },
+		{ "S805Y",  "GXL",  MESON_CPU_MAJOR_ID_GXL,  0xb0, 0xf0 },
+		{ "S912",   "GXM",  MESON_CPU_MAJOR_ID_GXM,  0x0,  0x0 },
+	};
 #endif
 
 	seq_printf(m, "Processor\t: %s rev %d (%s)\n",
@@ -481,12 +502,25 @@ static int c_show(struct seq_file *m, void *v)
 	seq_printf(m, "CPU revision\t: %d\n", read_cpuid_id() & 15);
 
 	seq_puts(m, "\n");
-
-	seq_printf(m, "Hardware\t: %s\n", machine_name);
 #ifdef CONFIG_AMLOGIC_CPU_INFO
 	cpuinfo_get_chipid(&low0, &low1, &high0, &high1);
 	seq_printf(m, "Serial\t\t: %08x%08x%08x%08x\n",
 		   high1, high0, low1, low0);
+
+	meson_major = high1 >> 24;
+	meson_minor = (high1 >> 16) & 0xff;
+	meson_pack = (high1 >> 8) & 0xff;
+	meson_name = "unkown_soc"; /* Give it a default name */
+	meson_family = "unkown_family"; /* Give it a default family */
+
+	for (i = 0 ; i < ARRAY_SIZE(meson_packages) ; ++i) {
+		if (meson_packages[i].major_id == meson_major &&
+		    meson_packages[i].pack_id == (meson_pack & meson_packages[i].pack_mask)) {
+			meson_name = meson_packages[i].name;
+			meson_family = meson_packages[i].family;
+		}
+	}
+	seq_printf(m, "Hardware\t: Amlogic %s (%s)\n", meson_name, meson_family);
 #endif
 	return 0;
 }
