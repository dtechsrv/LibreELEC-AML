From 86030ab2b2dab6eb9eb64f32deec2cf97c31a4d9 Mon Sep 17 00:00:00 2001
From: "charles.park" <charles.park@hardkernel.com>
Date: Sun, 10 Apr 2016 12:12:38 +0900
Subject: [PATCH 1/3] ODROID-C2 : gpio sysfs irq implement.

Change-Id: I1391eccf4453fb358610b52fcd0beb4cfc3ea62f
---
 drivers/amlogic/pinctrl/pinctrl_amlogic.c | 114 ++++++++++++++++++++++++++++--
 drivers/gpio/gpiolib.c                    |  47 ++++++++++--
 include/linux/amlogic/pinctrl_amlogic.h   |   4 ++
 3 files changed, 155 insertions(+), 10 deletions(-)
 mode change 100644 => 100755 drivers/amlogic/pinctrl/pinctrl_amlogic.c
 mode change 100644 => 100755 drivers/gpio/gpiolib.c
 mode change 100644 => 100755 include/linux/amlogic/pinctrl_amlogic.h

diff --git a/drivers/amlogic/pinctrl/pinctrl_amlogic.c b/drivers/amlogic/pinctrl/pinctrl_amlogic.c
old mode 100644
new mode 100755
index 61a6b04..6e0668c
--- a/drivers/amlogic/pinctrl/pinctrl_amlogic.c
+++ b/drivers/amlogic/pinctrl/pinctrl_amlogic.c
@@ -922,6 +922,11 @@ static int meson_gpio_set_pullup_down(struct gpio_chip *chip,
 	meson_config_pullup(pin, domain, bank, config);
 	return 0;
 }
+
+#define	AMLGPIO_IRQ_MAX	8
+
+unsigned int meson_irq_desc[AMLGPIO_IRQ_MAX] = { 0, };
+
 static int meson_gpio_to_irq(struct gpio_chip *chip,
 			     unsigned int gpio, unsigned gpio_flag)
 {
@@ -935,12 +940,21 @@ static int meson_gpio_to_irq(struct gpio_chip *chip,
 				0x1,	/*GPIO_IRQ_RISING*/
 				0x10001, /*GPIO_IRQ_FALLING*/
 				};
-	 /*set trigger type*/
+	/*set trigger type*/
 	struct meson_domain *domain = to_meson_domain(chip);
-	 pin = domain->data->pin_base + gpio;
-	 regmap_update_bits(int_reg, (GPIO_EDGE * 4),
-						0x10001<<irq_bank,
-						type[irq_type]<<irq_bank);
+
+	if (meson_irq_desc[irq_bank])	{
+		pr_err("ERROR(%s) : already allocation irq bank!!\n",
+							 __func__);
+		pr_err("ERROR(%s) : gpio = %d, bank = %d\n", __func__,
+							    gpio,
+							    irq_bank);
+		return	-1;
+	}
+	pin = domain->data->pin_base + gpio;
+	regmap_update_bits(int_reg, (GPIO_EDGE * 4),
+					0x10001<<irq_bank,
+					type[irq_type]<<irq_bank);
 	/*select pin*/
 	start_bit = (irq_bank&3)*8;
 	regmap_update_bits(int_reg,
@@ -983,9 +997,98 @@ static int meson_gpio_mask_irq(struct gpio_chip *chip,
 
 	regmap_update_bits(int_reg,  (GPIO_FILTER_NUM*4),
 			0x7<<start_bit, filter<<start_bit);
+
+	meson_irq_desc[irq_bank] = gpio;
+
 	return 0;
 }
 
+#include <linux/interrupt.h>
+
+static int find_free_irq_bank(void)
+{
+	unsigned int i;
+
+	for (i = 0; i < AMLGPIO_IRQ_MAX; i++)	{
+		if (!meson_irq_desc[i])
+			break;
+	}
+
+	if (i == AMLGPIO_IRQ_MAX)
+		pr_err("ERROR(%s) : Can't find free irq bank!!\n", __func__);
+
+	return	(i != AMLGPIO_IRQ_MAX) ? i : -1;
+}
+
+/* enable sysclass gpio edge */
+static int meson_to_irq(struct gpio_chip *chip,
+			unsigned int offset)
+{
+	return	offset;
+}
+
+int meson_setup_irq(struct gpio_chip *chip, unsigned int gpio,
+			unsigned int irq_flags, int *irq_banks)
+{
+	int irq_rising = -1, irq_falling = -1;
+	unsigned int gpio_flag;
+
+	/* rising irq setup */
+	if (irq_flags & IRQF_TRIGGER_RISING)	{
+		irq_rising = find_free_irq_bank();
+		if (irq_rising < 0)
+			goto out;
+
+		gpio_flag = AML_GPIO_IRQ(irq_rising,
+					 FILTER_NUM0,
+					 GPIO_IRQ_RISING);
+
+		if (meson_gpio_to_irq(chip, gpio, gpio_flag) < 0)
+			goto out;
+	}
+
+	/* falling irq setup */
+	if (irq_flags & IRQF_TRIGGER_FALLING)	{
+		irq_falling = find_free_irq_bank();
+		if ((irq_falling) < 0)
+			goto out;
+
+		gpio_flag = AML_GPIO_IRQ(irq_falling,
+					 FILTER_NUM0,
+					 GPIO_IRQ_FALLING);
+
+		if (meson_gpio_to_irq(chip, gpio, gpio_flag) < 0)
+			goto out;
+	}
+
+	irq_banks[0] = irq_rising;	irq_banks[1] = irq_falling;
+	return	0;
+out:
+	if (irq_rising  != -1)
+		meson_irq_desc[irq_rising]  = 0;
+	if (irq_falling != -1)
+		meson_irq_desc[irq_falling] = 0;
+	return	-1;
+}
+EXPORT_SYMBOL(meson_setup_irq);
+
+void meson_free_irq(unsigned int gpio, int *irq_banks)
+{
+	int i, find;
+
+	irq_banks[0] = -1, irq_banks[1] = -1;
+
+	for (i = 0, find = 0; i < AMLGPIO_IRQ_MAX; i++)	{
+		if (gpio == meson_irq_desc[i])	{
+			irq_banks[find++] = i;
+			meson_irq_desc[i] = 0;
+		}
+		if (find == 2)
+			break;
+	}
+}
+EXPORT_SYMBOL(meson_free_irq);
+
 struct pinctrl_dev *pctl;
 static int meson_gpiolib_register(struct amlogic_pmx  *pc)
 {
@@ -1006,6 +1109,7 @@ static int meson_gpiolib_register(struct amlogic_pmx  *pc)
 		domain->chip.set_pullup_down = meson_gpio_set_pullup_down;
 		domain->chip.set_gpio_to_irq = meson_gpio_to_irq;
 		domain->chip.mask_gpio_irq = meson_gpio_mask_irq;
+		domain->chip.to_irq = meson_to_irq;
 		domain->chip.base = -1;
 		domain->chip.ngpio = domain->data->num_pins;
 		domain->chip.can_sleep = false;
diff --git a/drivers/gpio/gpiolib.c b/drivers/gpio/gpiolib.c
old mode 100644
new mode 100755
index 6ae19cc..b3a4b34
--- a/drivers/gpio/gpiolib.c
+++ b/drivers/gpio/gpiolib.c
@@ -419,13 +419,17 @@ static irqreturn_t gpio_sysfs_irq(int irq, void *priv)
 	return IRQ_HANDLED;
 }
 
+#include <linux/amlogic/pinctrl_amlogic.h>
+/* AMLogic GPIO irq bank start offset */
+#define	AMLGPIO_IRQ_BASE	96
+
 static int gpio_setup_irq(struct gpio_desc *desc, struct device *dev,
 		unsigned long gpio_flags)
 {
 	struct kernfs_node	*value_sd;
 	unsigned long		irq_flags;
 	int			ret, irq, id;
-
+	int			irq_banks[2] = {0, };
 	if ((desc->flags & GPIO_TRIGGER_MASK) == gpio_flags)
 		return 0;
 
@@ -435,8 +439,17 @@ static int gpio_setup_irq(struct gpio_desc *desc, struct device *dev,
 
 	id = desc->flags >> ID_SHIFT;
 	value_sd = idr_find(&dirent_idr, id);
-	if (value_sd)
-		free_irq(irq, value_sd);
+	if (value_sd)	{
+		meson_free_irq(irq, &irq_banks[0]);
+
+		/* rising irq bank */
+		if (irq_banks[0] != -1)
+			free_irq(irq_banks[0] + AMLGPIO_IRQ_BASE, value_sd);
+
+		/* falling irq bank */
+		if (irq_banks[1] != -1)
+			free_irq(irq_banks[1] + AMLGPIO_IRQ_BASE, value_sd);
+	}
 
 	desc->flags &= ~GPIO_TRIGGER_MASK;
 
@@ -475,8 +488,32 @@ static int gpio_setup_irq(struct gpio_desc *desc, struct device *dev,
 		}
 	}
 
-	ret = request_any_context_irq(irq, gpio_sysfs_irq, irq_flags,
-				"gpiolib", value_sd);
+	ret = meson_setup_irq(desc->chip, irq, irq_flags, &irq_banks[0]);
+
+	if (ret < 0)
+		goto free_id;
+
+	/* rising irq bank */
+	if (irq_banks[0] != -1)	{
+		ret = request_any_context_irq(irq_banks[0] + AMLGPIO_IRQ_BASE,
+					gpio_sysfs_irq, IRQF_DISABLED,
+					"gpiolib", value_sd);
+		if (ret < 0)
+			goto free_id;
+	}
+	/* falling irq bank */
+	if (irq_banks[1] != -1)	{
+		ret = request_any_context_irq(irq_banks[1] + AMLGPIO_IRQ_BASE,
+					gpio_sysfs_irq, IRQF_DISABLED,
+					"gpiolib", value_sd);
+
+		if (ret < 0)	{
+			if (irq_banks[0] != -1)
+				free_irq(irq_banks[0] + AMLGPIO_IRQ_BASE,
+					 value_sd);
+			goto free_id;
+		}
+	}
 	if (ret < 0)
 		goto free_id;
 
diff --git a/include/linux/amlogic/pinctrl_amlogic.h b/include/linux/amlogic/pinctrl_amlogic.h
old mode 100644
new mode 100755
index 9a44d4d..f4ee7b6
--- a/include/linux/amlogic/pinctrl_amlogic.h
+++ b/include/linux/amlogic/pinctrl_amlogic.h
@@ -193,4 +193,8 @@ static inline struct meson_domain *to_meson_domain(struct gpio_chip *chip)
 }
 
 extern struct amlogic_pmx *gl_pmx;
+
+int meson_setup_irq(struct gpio_chip *chip, unsigned int gpio,
+			unsigned int irq_flags, int *irq_banks);
+void meson_free_irq(unsigned int gpio, int *irq_banks);
 #endif
-- 
1.8.3.1


From 29144edb6403716ead47742f138afa6b3c1aaab1 Mon Sep 17 00:00:00 2001
From: Joy Cho <joy.cho@hardkernel.com>
Date: Thu, 12 May 2016 10:49:41 +0900
Subject: [PATCH 2/3] ODROID-C2: Apply meson_fix_irqbank to find an available
 gpioirq bank

Change-Id: I76a47610feda467007aa880a4dee428d8fd94383
---
 drivers/amlogic/pinctrl/pinctrl_amlogic.c | 21 +++++++++++++++++++++
 include/linux/amlogic/pinctrl_amlogic.h   |  1 +
 2 files changed, 22 insertions(+)

diff --git a/drivers/amlogic/pinctrl/pinctrl_amlogic.c b/drivers/amlogic/pinctrl/pinctrl_amlogic.c
index 6e0668c..90c780b 100755
--- a/drivers/amlogic/pinctrl/pinctrl_amlogic.c
+++ b/drivers/amlogic/pinctrl/pinctrl_amlogic.c
@@ -1027,6 +1027,27 @@ static int meson_to_irq(struct gpio_chip *chip,
 	return	offset;
 }
 
+/* find available irq bank */
+int meson_fix_irqbank(int bank)
+{
+	if (bank < AMLGPIO_IRQ_MAX)	{
+		if (!meson_irq_desc[bank])
+			return	bank;
+		else	{
+			pr_err("ERROR(%s):already allocation irq bank(%d)!!\n",
+							__func__, bank);
+		}
+
+		/* if irq bank is not empty then find free irq bank */
+		bank = find_free_irq_bank();
+		pr_err("%s : new allocation irq bank(%d)!!\n",
+						__func__, bank);
+		return	bank;
+	}
+	return	-1;
+}
+EXPORT_SYMBOL(meson_fix_irqbank);
+
 int meson_setup_irq(struct gpio_chip *chip, unsigned int gpio,
 			unsigned int irq_flags, int *irq_banks)
 {
diff --git a/include/linux/amlogic/pinctrl_amlogic.h b/include/linux/amlogic/pinctrl_amlogic.h
index f4ee7b6..171651a 100755
--- a/include/linux/amlogic/pinctrl_amlogic.h
+++ b/include/linux/amlogic/pinctrl_amlogic.h
@@ -196,5 +196,6 @@ extern struct amlogic_pmx *gl_pmx;
 
 int meson_setup_irq(struct gpio_chip *chip, unsigned int gpio,
 			unsigned int irq_flags, int *irq_banks);
+int meson_fix_irqbank(int bank);
 void meson_free_irq(unsigned int gpio, int *irq_banks);
 #endif
-- 
1.8.3.1


From 694c82b2ef24d5a8b080a5ea86373a71a9035fb4 Mon Sep 17 00:00:00 2001
From: Brian Kim <brian.kim@hardkernel.com>
Date: Fri, 20 Jan 2017 14:06:58 +0900
Subject: [PATCH 3/3] pinctrl: meson-gxbb: fixed wrong pin multiplexing

There is wrong UART_C pin function bits. This change fixes wrong UART_C
pin multiplexing correctly as below:

- GPIOY_11, UART_CTS_C function = register 1/bit 17
- GPIOY_12, UART_RTS_C function = register 1/bit 16
- GPIOY_13, UART_TX_C function = register 1/bit 19
- GPIOY_14, UART_RX_C function = register 1/bit 18

Change-Id: Ibbcbfd84946bca5ab64c1965e7f83b5e773c2ad0
Signed-off-by: Brian Kim <brian.kim@hardkernel.com>
---
 drivers/amlogic/pinctrl/pinctrl_gxbb.c | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/drivers/amlogic/pinctrl/pinctrl_gxbb.c b/drivers/amlogic/pinctrl/pinctrl_gxbb.c
index 8dda824..04f70d8 100644
--- a/drivers/amlogic/pinctrl/pinctrl_gxbb.c
+++ b/drivers/amlogic/pinctrl/pinctrl_gxbb.c
@@ -479,10 +479,10 @@ static unsigned int gpio_to_pin[][6] = {
 	[PIN_GPIOY_8] = {PK(2, 16), PK(3, 5), PK(1, 5), NE, NE, NE,},
 	[PIN_GPIOY_9] = {PK(2, 16), PK(3, 5), PK(1, 6), NE, NE, NE,},
 	[PIN_GPIOY_10] = {PK(2, 16), PK(3, 5), PK(1, 7), NE, NE, NE,},
-	[PIN_GPIOY_11] = {PK(3, 3), PK(1, 19), PK(1, 8), NE, NE, NE,},
-	[PIN_GPIOY_12] = {PK(1, 18), PK(1, 9), NE, NE, NE, NE,},
-	[PIN_GPIOY_13] = {PK(1, 17), PK(1, 10), NE, NE, NE, NE,},
-	[PIN_GPIOY_14] = {PK(1, 16), PK(1, 11), NE, NE, NE, NE,},
+	[PIN_GPIOY_11] = {PK(3, 3), PK(1, 8), PK(1, 17), NE, NE, NE,},
+	[PIN_GPIOY_12] = {PK(1, 9), PK(1, 16), NE, NE, NE, NE,},
+	[PIN_GPIOY_13] = {PK(1, 10), PK(1, 19), NE, NE, NE, NE,},
+	[PIN_GPIOY_14] = {PK(1, 11), PK(1, 18), NE, NE, NE, NE,},
 	[PIN_GPIOY_15] = {PK(2, 20), PK(1, 20), PK(1, 22), NE, NE, NE,},
 	[PIN_GPIOY_16] = {PK(2, 21), PK(1, 21), NE, NE, NE, NE,},
 	[PIN_GPIO_TEST_N] = {PK(AO, 19), PK(AO2, 2), NE, NE, NE, NE,},
-- 
1.8.3.1

